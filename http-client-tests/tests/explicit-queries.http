# These tests do validations using CliContext instances that are manually constructed
# equivalents to those in commonMain/kotlin/constants/Preset

# Conversely, the preset-queries.http tests will perform the same tests, but using
# the baseEngine field of the CliContext to utilize the pre-built ValidationEngine
# from the ValidationService

### Default
# @name Default
POST {{host}}/validate
Content-Type: application/json

< ../resources/explicit-preset-requests/default.json

> {%
    client.test("Validated Successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    import { containsIssue } from "../utilities/assertions";
    client.test("Issues are Correct", function() {
        let issues = response.body.outcomes[0].issues
        client.log("issues:" + issues.length)
        client.assert(issues.length === 2);
        client.assert(containsIssue(issues, 88, 12, "This element does not match any known slice defined in the profile http://hl7.org/fhir/StructureDefinition/bp|5.0.0 (this may not be a problem, but you should check that it's not intended to match a slice)", "INFORMATIONAL", "INFORMATION"));
    });
%}

### CDA
# @name CDA
# This example is compo
POST {{host}}/validate
Content-Type: application/json

< ../resources/explicit-preset-requests/cda.json

> {%
    client.test("Validated Successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    import { containsIssue } from "../utilities/assertions";

    client.test("Issues are Correct", function () {
        let issues = response.body.outcomes[0].issues
        client.log("issues:" + issues.length)
        client.assert(issues.length === 10);
        client.assert(containsIssue(issues, 20, 24, "Binding has no source, so can't be checked", "CODEINVALID", "INFORMATION"))
        client.assert(containsIssue(issues, 251, 184, "The OID '2.16.840.1.114222.4.11.1066' is not known, so the code can't be validated", "CODEINVALID", "WARNING"))
    });
%}


### US-CDA
# @name US-CDA
# Check that a request with explicit IG settings returns an expected response
# @timeout 240
POST {{host}}/validate
Content-Type: application/json

< ../resources/explicit-preset-requests/us-ccda.json

> {%
    client.test("Validated Successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    import { containsIssue } from "../utilities/assertions";
    client.test("Issues are Correct", function() {
        let issues = response.body.outcomes[0].issues
        client.log("issues:" + issues.length)
        client.assert(issues.length === 10)
        client.assert(containsIssue(issues, 20, 24, "Binding has no source, so can't be checked", "CODEINVALID", "INFORMATION"))
        client.assert(!containsIssue(issues, 251, 184, "The OID '2.16.840.1.113883.1.11.19830' is not known, so the code can't be validated", "CODEINVALID", "WARNING"))
    })
%}

### IPS
# @name IPS
# @timeout 120
POST {{host}}/validate
Content-Type: application/json

< ../resources/explicit-preset-requests/ips.json

> {%
    client.test("Validated Successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    import { containsIssue } from "../utilities/assertions";
    client.test("Issues are Correct", function() {
        let issues = response.body.outcomes[0].issues
        client.log("issues:" + issues.length)
        client.assert(issues.length === 40);
        client.assert(containsIssue(issues, 1, 2, "The Snomed CT code 373270004 (Substance with penicillin structure and antibacterial mechanism of action) is not a member of the IPS free set", "BUSINESSRULE", "INFORMATION"))
        client.assert(containsIssue(issues, 1, 2, "The Snomed CT code 108774000 (Product containing anastrozole (medicinal product)) is not a member of the IPS free set", "BUSINESSRULE", "INFORMATION"))

        client.assert(!containsIssue(issues, 314, 4, "This element does not match any known slice defined in the profile http://hl7.org.au/fhir/ips/StructureDefinition/Bundle-au-ips|0.0.1 (this may not be a problem, but you should check that it's not intended to match a slice)", "INFORMATIONAL", "INFORMATION"))
        client.assert(!containsIssue(issues, 134, 8, "This element does not match any known slice defined in the profile http://hl7.org.au/fhir/core/StructureDefinition/au-core-patient|0.3.0 (this may not be a problem, but you should check that it's not intended to match a slice)", "INFORMATIONAL","INFORMATION"))

    });
%}

### IPS-AU
# @name IPS-AU
# @timeout 120
POST {{host}}/validate
Content-Type: application/json

< ../resources/explicit-preset-requests/ips-au.json

> {%
    client.test("Validated Successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    import { containsIssue } from "../utilities/assertions";
    client.test("Issues are Correct", function() {
        let issues = response.body.outcomes[0].issues
        client.log("issues:" + issues.length)
        client.assert(issues.length === 48);
        client.assert(containsIssue(issues, 2, 37, "The Snomed CT code 373270004 (Substance with penicillin structure and antibacterial mechanism of action) is not a member of the IPS free set", "BUSINESSRULE", "INFORMATION"))
        client.assert(containsIssue(issues, 105, 28, "This element does not match any known slice defined in the profile http://hl7.org.au/fhir/ps/StructureDefinition/au-ps-composition|0.1.0-cibuild (this may not be a problem, but you should check that it's not intended to match a slice)", "INFORMATIONAL", "INFORMATION"))
    });
%}

### SQL-ON-FHIR
# @name SQL-ON-FHIR
# Check that a request with explicit IG settings returns an expected response
POST {{host}}/validate
Content-Type: application/json

< ../resources/explicit-preset-requests/sql-on-fhir.json

> {%
    client.test("Validated Successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    import { containsIssue } from "../utilities/assertions";
    client.test("Issues are Correct", function() {
        let issues = response.body.outcomes[0].issues
        client.log("issues:" + issues.length)
        client.assert(issues.length === 3);
        client.assert(containsIssue(issues, 19, 11, "This column is not defined as a collection, but the path statement 'use' might return multiple values for the column 'use' for some inputs", "BUSINESSRULE", "WARNING"))
        client.assert(containsIssue(issues, 23, 11, "This column is not defined as a collection, but the path statement 'city' might return multiple values for the column 'city' for some inputs", "BUSINESSRULE", "WARNING"))
        client.assert(containsIssue(issues, 27, 11, "This column is not defined as a collection, but the path statement 'postalCode' might return multiple values for the column 'zip' for some inputs", "BUSINESSRULE", "WARNING"))
    });
%}